/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50621
Source Host           : localhost:3306
Source Database       : express-web

Target Server Type    : MYSQL
Target Server Version : 50621
File Encoding         : 65001

Date: 2018-09-25 14:44:40
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `aid` varchar(36) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `createTime` timestamp NULL DEFAULT NULL,
  `read` int(255) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `artType` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`aid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('44a68528-2549-4754-9e47-2791d09883e7', '前端面试题LazyMan实现、解析', 'sugar', '2018-09-08 14:57:46', '310', '前端', 'home');
INSERT INTO `article` VALUES ('44a68528-2549-4754-9e47-2791d09883e8', 'JavaScript简介', 'sugar', '2018-09-09 14:20:26', '126', 'JS', 'javascript');
INSERT INTO `article` VALUES ('44a68528-2549-4754-9e47-2791d09883e9', 'JavaScript数据类型', 'sugar', '2018-09-09 14:20:35', '33', 'JS', 'javascript');
INSERT INTO `article` VALUES ('44a68528-2549-4754-9e47-2791d09883ff', '完全理解JavaScript闭包', 'sugar', '2018-09-09 14:20:43', '265', 'JS', 'home');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `cid` varchar(36) NOT NULL COMMENT '评论id',
  `pid` varchar(36) NOT NULL,
  `aid` varchar(36) NOT NULL,
  `user` varchar(36) NOT NULL,
  `createTime` datetime NOT NULL,
  `content` text NOT NULL,
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('18fdcc83-2e4a-4020-817d-edbde45af3d9', '0', '44a68528-2549-4754-9e47-2791d09883ff', '风中追风', '2018-09-13 23:07:28', '学习了，讲的很透彻');
INSERT INTO `comment` VALUES ('6585e36b-8a92-4e17-9d3f-5cfd5adf5dae', '0', '44a68528-2549-4754-9e47-2791d09883e7', '风中追风', '2018-09-14 14:47:36', '技术干货！顶顶顶顶');
INSERT INTO `comment` VALUES ('ac8e0a1b-75d7-4da6-8642-ef8f92372e22', '0', '44a68528-2549-4754-9e47-2791d09883ff', '风中追风', '2018-09-15 14:49:18', '12');

-- ----------------------------
-- Table structure for content
-- ----------------------------
DROP TABLE IF EXISTS `content`;
CREATE TABLE `content` (
  `aid` varchar(36) NOT NULL,
  `content` text NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`aid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of content
-- ----------------------------
INSERT INTO `content` VALUES ('44a68528-2549-4754-9e47-2791d09883e7', '<h1 id=\"前端面试题lazyman实现、解析\">前端面试题LazyMan实现、解析</h1>\n<p>最近看到一个LazyMan面试题比较有趣，也可以作为js基础的一个检测。</p>\n<p>实现lazyMan可以考察</p>\n<ul>\n<li>Eventloop</li>\n<li>this指向问题</li>\n<li>js容错处理</li>\n<li>逻辑思路</li>\n</ul>\n<h2 id=\"lazyman实现的效果\">LazyMan实现的效果</h2>\n<blockquote>\n<p>实现一个LazyMan，可以按照以下方式调用:<br>\nLazyMan(“Hank”)输出:<br>\nHi! This is Hank!<br>\nLazyMan(“Hank”).sleep(10).eat(“dinner”)<br>\n输出  Hi! This is Hank!<br>\n//等待10秒…<br>\nWake up after 10<br>\nEat dinner~<br>\nLazyMan(“Hank”).eat(“dinner”).eat(“supper”)<br>\n输出  Hi This is Hank!<br>\nEat dinner~<br>\nEat supper~<br>\nLazyMan(“Hank”).sleepFirst(5).eat(“supper”)<br>\n//等待5秒<br>\n输出  Wake up after 5<br>\n输出  Hi This is Hank!<br>\n输出  Eat supper<br>\n以此类推。</p>\n</blockquote>\n<h2 id=\"实现思路\">实现思路</h2>\n<p>要实现LazyMan的功能其实也比较简单。</p>\n<ul>\n<li>首先把LazyMan看作一个构造函数，LazyMan会创建一个实例对象</li>\n<li>其次sleep和eat都是很明显的一个链式调用，我们只需要每个方法都返回LazyMan实例对象</li>\n<li>LazyMan实例对象中维护一个名为stack的数组和一个next函数。每次调用sleep/eat方法，都向stack中添加一个新的函数。每次调用next方法就从前取出stack中保存的函数并执行</li>\n<li>当LazyMan实例化之后，使用setTimeout调用next方法。真正开始链式调用。</li>\n</ul>\n<h2 id=\"lazyman构造函数\">LazyMan构造函数</h2>\n<p>下面我们来看看LazyMan的构造函数的代码</p>\n<pre class=\" language-javascript\"><code class=\"prism  language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">LazyMan</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n  <span class=\"token comment\">//没有使用new关键字，我们需要做一定的容错处理    </span>\n  <span class=\"token comment\">//确保一定会调用new LazyMan()   </span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">LazyMan</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyMan</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span>    \n  <span class=\"token comment\">//记录LazyMan的名字    </span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name    \n  <span class=\"token comment\">//_stack数组中存放的就是具体需要执行方法（sleep/eat）    </span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>   \n  <span class=\"token comment\">//_stack中加入打招呼语句，并调用next    </span>\n  <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>    \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hi This is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>self<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>    \n    self<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>   \n  <span class=\"token comment\">//next方法开启链式调用    </span>\n  <span class=\"token comment\">//setTimeout是为了确保sleep/eat都已经push到_stack数组中了    </span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">}</span>  \n</code></pre>\n<h2 id=\"lazyman原型对象\">LazyMan原型对象</h2>\n<p>LazyMan的原型对象应该包括三个函数</p>\n<ul>\n<li>sleep</li>\n<li>eat</li>\n<li>next</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"prism  language-javascript\">LazyMan<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n <span class=\"token comment\">//因为function中this指向的问题    </span>\n <span class=\"token comment\">//我们需要用self指向LazyMan实例    </span>\n <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>    \n <span class=\"token comment\">//将一个函数push到_stack数组中    </span>\n <span class=\"token comment\">//该函数只执行console和调用实例对象的next    </span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Eat </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>food<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>    \n    self<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token comment\">//return this可以实现链式调用    </span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>    \n<span class=\"token punctuation\">}</span>    \n    \n<span class=\"token comment\">//sleep方法与eat方法基本一样    </span>\n<span class=\"token comment\">//唯一区别就是console和next方法需要延迟执行    </span>\nLazyMan<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>    \n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Wake up after </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sec<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>    \n      self<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> sec <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>    \n<span class=\"token punctuation\">}</span>    \n    \nLazyMan<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n  <span class=\"token comment\">//从数组前面取出function    </span>\n  <span class=\"token keyword\">let</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n  <span class=\"token comment\">//如果function存在，则调用它    </span>\n  fn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">}</span>  \n</code></pre>\n<h2 id=\"功能测试、思考\">功能测试、思考</h2>\n<p>现在我们调用</p>\n<pre class=\" language-javascript\"><code class=\"prism  language-javascript\"><span class=\"token function\">LazyMan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'Hank\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'dinner\'</span><span class=\"token punctuation\">)</span>  \n输出  Hi<span class=\"token operator\">!</span> This is Hank    \n<span class=\"token comment\">//等待5秒..    </span>\n输出  Wake up after <span class=\"token number\">5</span>    \n输出  Eat dinner<span class=\"token operator\">~</span>    \n<span class=\"token comment\">//注意！！以上代码是在node平台测试通过，浏览器可能不支持一些es6语法  </span>\n</code></pre>\n<p>到这里一个LazyMan的功能就实现了，但题目中的sleepFirst还没有完成。不过到这里大家应该都知道怎么实现sleepFirst功能了吧，sleepFirst就留待大家补充吧</p>', '前端面试题LazyMan实现、解析');
INSERT INTO `content` VALUES ('44a68528-2549-4754-9e47-2791d09883e8', '<h1 id=\"javascript简介\">JavaScript简介</h1>\n<p>网络上关于JavaScript的介绍挺多的，我们这里就不重复这些介绍了。这里我贴出《JavaScript权威指南》关于JavaScript的介绍，并对其中一些重要的部分做出解释。</p>\n<h2 id=\"javascript是什么？\">JavaScript是什么？</h2>\n<blockquote>\n<p>JavaScript 是面向 <strong>Web 的编程语言</strong>，绝大多数现代网站都使用了 JavaScript，并且所有的现代 Web 浏览器（电脑，手机，平板）均包含了 JavaScript 解释器。 这使得 JavaScript 能够称得上史上使用最广泛的编程语言。 <strong>JavaScript 也是前端开发工程师必须掌握的三种技能之一</strong>：描述网页内容的 HTML、描述网页样式的 CSS、以及描述网页行为的 JavaScript。------《JavaScript权威指南》</p>\n</blockquote>\n<p>从《JavaScript权威指南》中我们可以大概了解到JavaScript是编写web网页的编程语言（node的出现让JavaScript可以从事服务端编程，极大的增加了JavaScript这门语言的想象力）。JavaScript几乎垄断了浏览器开发语言，这也造成了JavaScript 是前端开发工程师必须掌握的三种技能之一。</p>\n<h2 id=\"javascript与ecmascript关系\">JavaScript与ECMAScript关系</h2>\n<p>可能有读者经常听到ECMAScript这个词，但它跟JavaScript有什么关系呢？</p>\n<p>这里我做一个不太恰当的比喻</p>\n<ul>\n<li>JavaScript解释器比喻成一辆车</li>\n</ul>\n<p>没有ECMAScript之前是什么状况呢？每个工厂生成出来的车（chrome、IE、Firefox…）都不一样。这样做可苦了开车的人（前端程序员）。你必须要了解市面上所有车，你才能说你是个好司机（也许你的代码在chrome下正常运行、但IE下会报错），做大量的容错处理、客户端检测。<br>\nECMAScript的出现就是为了解决这个问题的。</p>\n<ul>\n<li>ECMAScript比喻成车的设计图</li>\n</ul>\n<p>有了车的设计图之后，工厂就不会随心所欲生产各式各样的汽车了。大家统一按照设计图生产。这样司机只要会开一种车，其他车都能开。</p>\n<p>看到这里你大概了解了它们之间的关系，总结一下：</p>\n<ul>\n<li>ECNAScript是标准、JavaScript是实现</li>\n</ul>\n<h2 id=\"java和javascript什么关系？\">Java和JavaScript什么关系？</h2>\n<p>Java和JavaScript的关系就像</p>\n<ul>\n<li>雷锋和雷峰塔的关系</li>\n<li>老婆和老婆饼的关系</li>\n<li>总结：Java和JavaScript没有半毛钱关系（除了名字都有Java）</li>\n</ul>\n<h2 id=\"javascript难么？\">JavaScript难么？</h2>\n<p>个人认为JavaScript算是比较好入门的语言。基本不用搭建环境，有个记事本和浏览器就行（不知道有多少自学Java的连开发环境都没搭建成功就放弃了）。JavaScript编程容易看到自己编程的成果，满足自己的成就感，也就更容易坚持下去。</p>\n<p>总之，兴趣和成就感能够让你更加有东西去学习这门语言，所以尽量保持对学习的兴趣。以下的课程我们也尽量从实用角度来讲解知识点，尽量避免大家产生“这个知识点有什么用？”这种想法。</p>\n<p>重要的话说三遍</p>\n<ul>\n<li>兴趣是最好的老师</li>\n<li>兴趣是最好的老师</li>\n<li>兴趣是最好的老师</li>\n</ul>', 'JavaScript简介');
INSERT INTO `content` VALUES ('44a68528-2549-4754-9e47-2791d09883e9', '<h1 id=\"javascript数据类型\">JavaScript数据类型</h1>\n<p>程序运行都是需要数据的，比如用于数学计算的数字、页面展示的文本等等其它的数据。</p>\n<p>JavaScript数据类型分为两类</p>\n<ul>\n<li>原始类型（primitive type）</li>\n<li>对象类型（object type）</li>\n</ul>\n<p>原始类型数据包括</p>\n<ul>\n<li>数字 （Number）</li>\n<li>字符串 （String）</li>\n<li>布尔值 （Boolean）</li>\n<li>null</li>\n<li>undefined</li>\n</ul>\n<p>除了以上五种数据类型，其他的都是对象类型</p>\n<ul>\n<li>普通对象</li>\n<li>特殊对象（数组）</li>\n<li>特殊对象（函数）</li>\n</ul>\n<h2 id=\"数字\">数字</h2>\n<pre><code>10         //正整数\n-10        //负数\n3.14       //小数\n6.02e23    //6.02×10^23\nNaN        //不是个数字（Not a Number）  Number(\'hello\')可以得到NaN\nInfinity   //无穷大  可以添加正负号  1/0 可以得到 Infinity\n0xff       //16进制数字   0xff 等于 255\n</code></pre>\n<p>以上举例都是数字类型对象，数字之间的常用算法有</p>\n<pre><code>+ （加）  - （减）  * （乘）  / （除）  % （取余）\n</code></pre>\n<p>这里我们贴出一些JavaScript中特殊的数字类型运算</p>\n<p><img src=\"http://localhost:3000/img/menu.saveimg.savepath20180830145157.jpg\" alt=\"enter image description here\"></p>\n<p>总结一下：</p>\n<ul>\n<li>NaN不管和谁做运算都会得到NaN</li>\n<li>Infinity + Infinity 还是（Infinity）无限大</li>\n<li>Infinity - Infinity = NaN （无限大 - 无限大 != 0 哦）</li>\n</ul>\n<h2 id=\"字符串\">字符串</h2>\n<pre><code>“”              //空字符串\n”hello”		    //字符串 hello\n“3.14”		    //字符串 3.14 跟数字3.14是不同的\n‘3.14‘		    //字符串也可以使用单引号\n“hello”.length  //字符串有代表长度的length属性   这里length==5\n“a” + “b”       //字符串相加可以拼接字符串        “ab”\n“a” + 1         //字符串与数字相加会把数字当作字符串 “a1” \n</code></pre>\n<p>字符串是JavaScript中最常见的类型之一，字符串还有很多方法可以调用。这部分内容后期我们会统一介绍</p>\n<h2 id=\"布尔值\">布尔值</h2>\n<p>生活中除了数字和字符串，还有一类代表真假的常量<br>\n比如 1&gt;2 （假）、地球是圆的（真）<br>\n布尔值只有两个</p>\n<ul>\n<li>true   （真）</li>\n<li>false  （假）</li>\n</ul>\n<p>if语句是条件判断语句。当if语句中表达式为true，那么就会执行if后面的的语句</p>\n<pre><code>if(true){\n	//‘true是真值，所以我执行了‘   会打印到控制台\n	console.log(\'true是真值，所以我执行了\')\n}\n\nif(false){\n	//‘false是假值，所以不会执行‘   不会打印到控制台\n	console.log(\'false是假值，所以不会执行\')\n}\n</code></pre>\n<p>除了false，JavaScript还会把 0、NaN、\"\" 、null、undefined当作假值处理</p>\n<pre><code>if(0){\n	console.log(\'0是假值，所以不会打印\')\n}\n</code></pre>\n<h2 id=\"普通对象\">普通对象</h2>\n<p>那么到底什么是对象类型呢，普通对象一般都是无序属性的集合。比如<br>\n下面一个对象描述了一个人的信息</p>\n<pre><code>{\n  //名字Hank\n  name:\'Hank\',\n  //年龄19\n  age:19,\n  //宠物是一个叫布鲁托的狗\n  pet:{\n	name:\'Pluto\',\n	breed:\'dog\'\n  }\n}\n</code></pre>\n<h2 id=\"数组\">数组</h2>\n<p>数组表示一组数据的集合，数组中每一个元素可以是任意类型</p>\n<pre><code>[1,2,3,4]			//这个数组中是数字\n[\'a\',\'b\']			//这个数组中是字符串\n[1,\'a\']				//这个数组既有数字也有字符串\n[1,2,3].length		//与字符串类似，数组的length属性代表数组中元素的个数\n[{name:\'Hank\',age:19}]  //数组也可包含对象\n</code></pre>\n<h2 id=\"函数\">函数</h2>\n<p>函数是一类特殊的对象，我们将在后面章节单独讨论。</p>', 'JavaScript数据类型');
INSERT INTO `content` VALUES ('44a68528-2549-4754-9e47-2791d09883ff', '<h1 id=\"完全理解javascript闭包\">完全理解JavaScript闭包</h1>\n<p>闭包是JavaScript的基础，也是很多初学JavaScript同学们比较迷惑的知识点。本文就用大白话加上例子来解释什么是闭包，以及为什么要用闭包。</p>\n<h2 id=\"一段简单的代码\">一段简单的代码</h2>\n<pre class=\" language-javascript\"><code class=\"prism  language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n	console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>在chrome浏览器执行结果如下<br>\n<img src=\"/img/menu.saveimg.savepath20180908111815.jpg\" alt=\"chrome环境下执行结果\"><br>\n我们看到在function A 执行完成之后，var a 就消失不见了。这当然是理所应当的，函数执行完成之后，函数内部的变量当然应当被回收。<br>\n但是，这并非绝对。看下面一段代码</p>\n<pre class=\" language-javascript\"><code class=\"prism  language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n	console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n	<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> B <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// A()返回了一个函数，注意A函数已经执行完成。本应该释放var a</span>\n<span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>			<span class=\"token comment\">// 执行这个返回的函数</span>\n</code></pre>\n<p><img src=\"/img/menu.saveimg.savepath20180908113405.jpg\" alt=\"闭包例子执行结果\"><br>\n我们可以看到，在A函数执行完成之后返回了另一个函数。这里我要提醒大家注意两点</p>\n<ul>\n<li><strong>A函数已经执行完成了，但是var a还是能在A返回的函数里访问到</strong></li>\n<li><strong>除了B函数能访问到A函数内定义的var a，其它地方怎么也访问不了var a了</strong></li>\n</ul>\n<p><strong>这就是闭包</strong><br>\n<strong>这就是闭包</strong><br>\n<strong>这就是闭包</strong></p>\n<h2 id=\"闭包很简单，但是tm到底有毛线用？\">闭包很简单，但是TM到底有毛线用？</h2>\n<p>我们来看一个网上的前端笔试题<br>\n<img src=\"/img/menu.saveimg.savepath20180908114912.jpg\" alt=\"js函数累加器\"><br>\n看看闭包怎么实现该需求</p>\n<pre class=\" language-javascript\"><code class=\"prism  language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// add函数执行时，结果会存储在sum中</span>\n	<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n	<span class=\"token comment\">// sum累加所有参数</span>\n	<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">of</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		sum <span class=\"token operator\">+=</span> i\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// _add函数，因为是在add函数中定义的，所以_add可以访问sum</span>\n	<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">_add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">of</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n			sum <span class=\"token operator\">+=</span> i\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token comment\">// return 自身方便调用</span>\n		<span class=\"token keyword\">return</span> _add	\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 覆盖toString方法，主要为了正确打印sum</span>\n	_add<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		<span class=\"token keyword\">return</span> sum\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// add 返回了_add内部定义的函数</span>\n	<span class=\"token keyword\">return</span> _add\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img src=\"/img/menu.saveimg.savepath20180908115923.jpg\" alt=\"js闭包实现累加器\"><br>\n看到这里大家应该了解了闭包的一个基本应用<br>\n总结一下</p>\n<ul>\n<li>add函数定义的sum变量记录累加器总和</li>\n<li>因为add函数返回了_add，所以add执行完成后sum不会释放</li>\n<li>_add可以访问sum变量，并不断累加</li>\n</ul>\n<h2 id=\"不好意思，我做加法只用计算器\">不好意思，我做加法只用计算器</h2>\n<p>什么？这个例子对你没用！<br>\n那我们看看另一个例子（<strong>闭包单例应用</strong>）</p>\n<blockquote>\n<p>我们在编写JavaScript的时候，有很多情况会用到单例模式，即只在第一次调用获取对象的方法时候使用new关键字创建一个新的对象。在对象已经生成之后在调用获取对象方法，都会返回第一次生成的那个对象</p>\n</blockquote>\n<pre class=\" language-javascript\"><code class=\"prism  language-javascript\"><span class=\"token comment\">// 函数A作为  </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n	<span class=\"token comment\">// 实例的构造函数，只有一个createTime属性</span>\n	<span class=\"token keyword\">function</span> <span class=\"token function\">Instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n	<span class=\"token punctuation\">}</span>\n	<span class=\"token comment\">// 单例默认为null</span>\n	<span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n	<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n		<span class=\"token comment\">// 如果单例为null，则构造一个新的实例</span>\n		<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n			instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n		<span class=\"token punctuation\">}</span>\n		<span class=\"token comment\">// 返回单例</span>\n		<span class=\"token keyword\">return</span> instance\n	<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> getInstance <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> instance1 <span class=\"token operator\">=</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> instance2 <span class=\"token operator\">=</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance1 <span class=\"token operator\">===</span> instance2<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img src=\"/img/menu.saveimg.savepath20180908125145.jpg\" alt=\"闭包实现单例\"></p>\n<h2 id=\"原理简单，要熟练掌握必须多写\">原理简单，要熟练掌握必须多写</h2>\n<p>闭包原理大家应该都明白了，但是实际工作中就是写不出来。这种情况就必须多看大牛们怎么写的，如<strong>Express</strong>中的获取路由<strong>lazyrouter</strong>方法就是经典的单例模式的运用</p>', '完全理解JavaScript闭包');
